from django import forms
from django.forms import modelform_factory, ModelForm, DecimalField
from django.forms.widgets import Select

from .models import Bb, Rubric


# На основе фабрики классов удобно создавать в контроллерах-функциях редко используемые формы.
# В этом случае класс формы создается только при необходимости и уничтожается сразу же,
# как только перестанет существовать хранящая егопеременная,
# благодаря чему экономится оперативная память.
# BbForm = modelform_factory(Bb,
#                            fields=('title', 'content', 'price', 'rubric'),
#                            labels={'title': 'Название товара'},
#                            help_texts={'rubric': 'Не забудьте выбрать рубрику!'},
#                            field_classes={'price': DecimalField},
#                            widgets={'rubric': Select(attrs={'size': 8})}
#                            )

class BbForm(ModelForm):
    class Meta:
        model = Bb
        fields = ('title', 'content', 'price', 'rubric')
        labels = {'title': 'Название товара'}
        help_texts = {'rubric': 'Не забудьте выбрать рубрику!'}
        field_classes = {'price': DecimalField}
        widgets = {'rubric': Select(attrs={'size': 8})}


# disabled   -   если True, то поле при выводе на экран станет недоступным,
# если False - доступным. Значение по умолчанию - False.

# error_messages   -   указывает сообщения об ошибках. Его значением должен быть словарь, ключи элементов
# которого соответствуют полям формы, а значениями элементов также должны быть словари.
# Во вложенных словарях ключи элементов соответствуют строковым кодам ошибок, а значения зададут
# строковые сообщения об ошибках.

# field_classes   -   указывает, поле какого типа должно быть создано в форме для соответствующего
# ему поля модели. Значением должен быть словарь, ключи элементов которого представляют имена полей модели,
# а значениями элементов станут ссылки на соответствующие им классы полей формы.

# form   -   служит для указания базовой формы, связанной с моделью, на основе которой будет создана новая форма.
# Заданная форма может задавать какие-либо параметры, общие для целой группы форм.

# help_texts   -   указывает дополнительные текстовые пояснения для полей формы
# (такой текст будет выводиться возле элементов управления). Значение этого параметра должно представлять
# собой словарь, ключи элементов которого соответствуют полям формы, а значения задают пояснения.

# initial   -   начальное значение для поля формы. Если не указан, то поле не будет
# иметь начального значения.

# label_suffix   -   суффикс, который будет добавлен к надписи для текущего поля.
# Если параметр не указан, то будет взято значение одноименного параметра, поддерживаемого конструктором
# класса формы. Если и тот не указан, будет использовано значение по умолчанию - символ двоеточия.

# labels   -   задает надписи для полей формы. Его значение должно представлять собой словарь,
# ключи элементов которого соответствуют полям формы, а значения задают надписи для них.

# required   -   если True, то в поле обязательно должно быть занесено значение,
# если False, то поле может быть "пустым". Значение по умолчанию — True.

# validators   -   валидаторы для текущего поля. Задаются в таком же формате, что
# и для поля модели.

# widgets   -   позволяет задать элемент управления, которым будет представляться на веб-странице то или
# иное поле модели. Значением должен быть словарь, ключи элементов которого представляют имена полей формы,
# а значениями элементов станут экземпляры классов элементов управления или ссьmки на сами эти классы.


# Полное объявление отдельных полей формы
# class BbForm(forms.ModelForm):
#     price = forms.DecimalField(label='Цена', decimal_places=2)
#     rubric = forms.ModelChoiceField(queryset=Rubric.objects.all(),
#                 label='Рубрика', help_text='Не забудьте задать рубрику!',
#                 widget=forms.widgets.Select(attrs={'size': 8}))
#
#     class Meta:
#         model = Bb
#         fields = ('title', 'content', 'price', 'rubric')
#         labels = {'title': 'Название товара'}


# Объявление в форме полей, не существующих в связанной модели
# Для того чтобы задать местоположение дополнительным полям, отстутсвующим в связанной с формой моделью,
# их необходимо добавить в список из атрибута fields в нужные позиции.
# class RegisterUserForm(forms.ModelForm):
#     password1 = forms.CharField(label='Пароль')
#     password2 = forms.CharField(label='Повторите пароль')
#
#     class Meta:
#         model = User
#         fields = ('username', 'email', 'password1', 'password2', 'first_name', 'last_name')
